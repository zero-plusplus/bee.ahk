class OrderedMap extends Map {
  ;; @type {any[]}
  __keys__ := []
  /**
   * @param {any} flatEntries* - A sequence of key-value pairs.
   */
  __New(flatEntries*) {
    this.set(flatEntries*)
  }
  __Enum(*) {
    enumerator := bee.Enumerable.toEnumeratorLike(this.__keys__)
    return Enum.bind(this, enumerator)

    Enum(this, enumerator, &key, &value := unset) {
      if (enumerator.call(&i, &key)) {
        value := this[key]
        return true
      }
      return false
    }
  }
  /**
   * Add zero or more elements.
   * @param {any} flatEntries* - A sequence of key-value pairs.
   * @chainable
   */
  set(flatEntries*) {
    while (A_Index <= flatEntries.length // 2) {
      key := flatEntries[(A_Index * 2) - 1]
      value := flatEntries[A_Index * 2]

      this.__keys__.push(key)
      this[key] := value
    }
    return this
  }
  /**
   * Deletes the elements that match the specified `key`.
   * Add one or more elements.
   * @param {any} key
   * @return {any}
   */
  delete(key) {
    this.delete(key)
    this.__keys__.removeAt(bee.Array.indexOf(this.__keys__, key))
  }
}