class Array extends Array {
  /**
   * Join each element with `delimiter`.
   * @param {string[] | bee.Enumerable} arr
   * @param {string} delimiter
   * @return {string}
   */
  static join(arr, delimiter) {
    str := ""
    for i, value in bee.query(arr) {
      str .= value . delimiter
    }
    str := RTrim(str, delimiter)

    return str
  }
  /**
   * Join each element with `delimiter`.
   * @param {string} delimiter
   * @return {string}
   */
  join(delimiter) {
    return bee.Array.join(this, delimiter)
  }
  /**
   * Returns a new array containing the elements of the specified range.
   * @template TElement
   * @param {TElement[]} arr
   * @param {Parameters<bee.RangeLiteral>} rangeLiteralParams*
   * @return {TElement[]}
   */
  static slice(arr, rangeLiteralParams*) {
    sliced := []
    for i, current in bee.RangeLiteral(rangeLiteralParams*).toRange(arr.length) {
      sliced.push(arr[current])
    }
    return sliced
  }
  /**
   * Returns a new array containing the elements of the specified range.
   * @param {TElement[]} arr
   * @param {Parameters<bee.RangeLiteral>} rangeLiteralParams*
   * @return {TElement[]}
   */
  slice(rangeLiteralParams*) {
    return bee.Array.slice(this, rangeLiteralParams*)
  }
}