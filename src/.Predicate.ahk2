/**
 * Predicate is collection of static methods that return test results as a boolean.
 * Each method receives the target to be inspected as its first argument, and the second and subsequent arguments receive supplementary data necessary for the inspection.
 *
 * If the argument is not satisfied, the second and subsequent arguments will automatically be partially applied and returned. This is useful for creating functions for more specific tests like the following.
 * ```ahk
 * startsWithAbc := bee.Predicate.startsWith("abc")
 * startsWithAbc("abcdefg") ; => true
 * ```
 */
class Predicate {
  /**
   * Determines whether the object is an object or not.
   *
   * Synonymous with [IsObject](https://lexikos.github.io/v2/docs/commands/IsObject.htm), , except that it is curryable.
   * @method
   * @param {any} value
   * @return {boolean}
   */
  class isObject extends bee.rule.PredicateFunc {
    static behavior(value) {
      return IsObject(value)
    }
  }
  /**
   * Determines if the string starts with `prefix` or not.
   * @param {string} str
   * @param {string} prefix
   * @return {boolean}
   */
  class startsWith extends bee.rule.PredicateFunc {
    static behavior(str, prefix) {
      str_prefix := SubStr(str, 1, StrLen(prefix))

      result := str_prefix == prefix
      return result
    }
  }
}