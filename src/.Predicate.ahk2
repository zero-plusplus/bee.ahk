/**
 * Predicate is collection of static methods that return test results as a boolean.
 * Each method receives the target to be inspected as its first argument, and the second and subsequent arguments receive supplementary data necessary for the inspection.
 *
 * If the argument is not satisfied, the second and subsequent arguments will automatically be partially applied and returned. This is useful for creating functions for more specific tests like the following.
 * ```ahk2
 * startsWithAbc := bee.Predicate.startsWith("abc")
 * startsWithAbc("abcdefg") ; => true
 * ```
 *
 * There are several variations of each predicate.
 * `all`, `any`, and `none` are useful for checking multiple values. It takes an array of values to check.
 *
 * ```ahk
 * bee.Predicate.not.isObject({}) ; => false
 * bee.Predicate.not.isObject("abc") ; => true
 *
 * bee.Predicate.all.isObject([ {}, [] ]) ; => true
 * bee.Predicate.all.isObject([ {}, [], "abc" ]) ; => false
 *
 * bee.Predicate.any.isObject([ {}, [], "abc" ]) ; => true
 * bee.Predicate.any.isObject([ "abc", "abc", "abc" ]) ; => false
 *
 * bee.Predicate.none.isObject([ {}, [], "abc" ]) ; => false
 * bee.Predicate.none.isObject([ "abc", "abc", "abc" ]) ; => true
 * ```
 */
class Predicate {
  /**
   * Determine if the target passes all tests.
   * @method all
   * @param {any} string
   * @param {(params*) => boolean} predicates
   * @return {boolean}
   */
  /**
   * It is another variation of the predicate that determines whether or not all targets pass a single test.
   * It has all the static methods that `bee.Predicate` has.
   *
   * Note that the first argument takes an array.
   */
  class all extends bee.rule.PredicateVariation {
    static behavior(target, predicates) {
      for i, predicate in predicates {
        if (predicate(target) == false) {
          return false
        }
      }
      return true
    }
    static wrapper(predicate, targets, params*) {
      if (!(targets is Array) || targets.length == 0) {
        return false
      }

      for i, target in targets {
        if (!predicate(target, params*)) {
          return false
        }
      }
      return true
    }
  }
  /**
   * Determines whether the object is an object or not.
   *
   * Synonymous with [IsObject](https://lexikos.github.io/v2/docs/commands/IsObject.htm), , except that it is curryable.
   * @method
   * @param {any} value
   * @return {boolean}
   */
  class isObject extends bee.rule.PredicateFunc {
    static behavior(value) {
      return IsObject(value)
    }
  }
  /**
   * Determines if the string starts with `prefix` or not.
   * @param {string} str
   * @param {string} prefix
   * @return {boolean}
   */
  class startsWith extends bee.rule.PredicateFunc {
    static behavior(str, prefix) {
      str_prefix := SubStr(str, 1, StrLen(prefix))

      result := str_prefix == prefix
      return result
    }
  }
}