/**
 * Predicate is collection of static methods that return test results as a boolean.
 * Each method receives the target to be inspected as its first argument, and the second and subsequent arguments receive supplementary data necessary for the inspection.
 *
 * If the argument is not satisfied, the second and subsequent arguments will automatically be partially applied and returned. This is useful for creating functions for more specific tests like the following.
 * ```ahk2
 * startsWithAbc := bee.Predicate.startsWith("abc")
 * startsWithAbc("abcdefg") ; => true
 * ```
 *
 * There are several variations of each predicate.
 * `all`, `any`, and `none` are useful for checking multiple values. It takes an array of values to check.
 *
 * ```ahk
 * bee.Predicate.not.isObject({}) ; => false
 * bee.Predicate.not.isObject("abc") ; => true
 *
 * bee.Predicate.all.isObject([ {}, [] ]) ; => true
 * bee.Predicate.all.isObject([ {}, [], "abc" ]) ; => false
 *
 * bee.Predicate.any.isObject([ {}, [], "abc" ]) ; => true
 * bee.Predicate.any.isObject([ "abc", "abc", "abc" ]) ; => false
 *
 * bee.Predicate.none.isObject([ {}, [], "abc" ]) ; => false
 * bee.Predicate.none.isObject([ "abc", "abc", "abc" ]) ; => true
 * ```
 */
class predicate {
  #Include %A_LineFile%\..\.all.ahk2
  #Include %A_LineFile%\..\.any.ahk2
  #Include %A_LineFile%\..\.is.ahk2
  #Include %A_LineFile%\..\.isNumber.ahk2
  #Include %A_LineFile%\..\.isNumberLike.ahk2
  #Include %A_LineFile%\..\.isObject.ahk2
  #Include %A_LineFile%\..\.isPrimitive.ahk2
  #Include %A_LineFile%\..\.isString.ahk2
  #Include %A_LineFile%\..\.not.ahk2
  #Include %A_LineFile%\..\.none.ahk2
  #Include %A_LineFile%\..\.startsWith.ahk2
}