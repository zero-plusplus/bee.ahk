/**
 * Convert the specified `callable` to a callback object.
 *
 * The callback object is passed as many real arguments as the number of arguments of `callable`.
 * @param {(params*) => any} callable
 * @param {number} limit - Limit on the number of arguments passed to `callable`
 * @return {(params*) => any}
 */
static callback(callable, limit := -1) {
  static callbackIdentifier := "<callback>", isCallback := ((callable) => bee.hasKey(callable, "__callback") && callable == callbackIdentifier)

  if (isCallback(callable)) {
    return callable
  }

  callback := Call.bind(callable, limit)
  callback.__callback := callbackIdentifier
  return callback

  Call(callable, limit, params*) {
    args := []
    Loop callable.maxParams {
      if (0 < params.length) {
        args.push(params.removeAt(1))
        continue
      }
      break
    }
    if (callable.isVariadic && 0 < params.length) {
      args.push(params*)
    }
    if (-1 < limit && limit < args.length) {
      args := bee.Array.slice(args, 1, Abs(limit))
    }
    return callable.call(args*)
  }
}