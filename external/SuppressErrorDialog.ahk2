/**
   * @licence MIT <http://opensource.org/licenses/mit-license.php>
   * @auther zero-plusplus
   */
  /**
   * Confirmed in v2.0-beta.1
   * Suppresses run-time error dialogs and instead outputs their contents to standard output.
   *
   * @param {boolean} [enable := true]
   * @example
   *  #Include <SuppressErrorDialog> ; Note: Please rename the extension from `ahk2` to `ahk`.
   *
   *  ; Just include it and it will work
   *  throw Error("Some error") ; Output to standard output instead message box
   *
   *  SuppressErrorDialog(false)
   *  throw Error("Some error") ; The error is displayed in the message box as usual
   */
  SuppressErrorDialog()
  SuppressErrorDialog(enable := true) {
    OnError(ErrorHandler, enable)
    return

    GetCallStack() {
      stacks := []

      startFrame := 2
      while (true) {
        e := Error("", -(startFrame + (A_Index - 1)))
        if (e.what == "" || IsNumber(e.what)) {
          break
        }
        stacks.push(e)
      }

      ; The what properties are off by one, unlike the actual stack properties, so fix them here
      if (0 < stacks.length) {
        for i, stack in stacks {
          if (i + 1 <= stacks.length) {
            nextStack := stacks[i + 1]
            stack.what := nextStack.what
          }
        }
        stacks.pop() ; The last stack should be removed because it is covered with information
      }
      return stacks
    }
    ErrorHandler(err, mode) {
      static ERROR_CODE := 2

      mostRecentStack := Error(err, -1)
      if (!IsObject(err)) {
        err := mostRecentStack
      }

      ; The file and line numbers in the error we received are somehow off by one stack and need to be fixed
      err.file := mostRecentStack.file
      err.line := mostRecentStack.line

      message := Format("{} ({}) : ==> {}", err.file, err.line, err.message)
      if (err.hasOwnProp("extra") && err.extra !== "") {
        message .= "`n     Specifically: " . err.extra
      }

      stacks := GetCallStack()
      if (0 < stacks.length) {
        message .= "`n`n[Call Stack]"
        for i, stack in stacks {
          message .= Format("`n> {}:{} : [{}]", stack.file, stack.line, stack.what)
        }
      }

      OutputDebug(message "`n")
      ExitApp(ERROR_CODE)
    }
  }