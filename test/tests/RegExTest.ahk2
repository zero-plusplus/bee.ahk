#Include ..\common.ahk2

class RegExTest {
  testConstructor(assert) {
    assert.deepEquals(bee.RegEx("i)source", "m").value, "m)source")
    assert.deepEquals(bee.RegEx("i)source").addFlag("m").value, "im)source")
  }
  class InstanceTest {
    testAddFlag(assert) {
      assert.deepEquals(bee.RegEx("", [ "i", "m" ]).addFlag("i", "x", "S").flags, [ "i", "m", "x", "S" ])
    }
    testMatch(assert) {
      assert.deepEquals(bee.RegEx("(\s)").match("a b c")[1], " ")
      assert.deepEquals(bee.RegEx("(\s)").match("a b c", 3).pos, 4)
      assert.deepEquals(bee.RegEx("(\s)").match("a b c", (match) => 2 < match.pos ? 0 : 1).pos, 4)
    }
    testMatchAll(assert) {
      assert.deepEquals(bee.RegEx("(\s)").matchAll("a b c").length, 2)
    }
    testRemoveFlag(assert) {
      assert.deepEquals(bee.RegEx("", [ "i", "m" ]).removeFlag("i").flags, [ "m" ])
    }
    testReplace(assert) {
      assert.equals(bee.RegEx("([^\s])").replace("a b c", "$"), "$ $ $")
      assert.equals(bee.RegEx("([^\s])").replace("a b c", "$", 1), "$ b c")
      assert.equals(bee.RegEx("([^\s])").replace("a b c", (match) => match[1] == "b" ? "$" : match[1]), "a $ c")
    }
    testReplaceAll(assert) {
      assert.equals(bee.RegEx("([^\s])").replaceAll("a b c", "$"), "$ $ $")
    }
  }
  class StaticTest {
    testFromRegExLiteral(assert) {
      assert.deepEquals(bee.RegEx.fromRegExLiteral(bee.PatternLiteral("/source/im")), { flags: [ "i", "m" ], source: "source" })
    }
    testMatch(assert) {
      assert.deepEquals(bee.RegEx.match("(\s)", "a b c")[1], " ")
      assert.deepEquals(bee.RegEx.match("(\s)", "a b c", 3).pos, 4)
      assert.deepEquals(bee.RegEx.match("(\s)", "a b c", (match) => 2 < match.pos ? 0 : 1).pos, 4)
    }
    testMatchAll(assert) {
      assert.deepEquals(bee.RegEx.matchAll("(\s)", "a b c").length, 2)
    }
    testReplace(assert) {
      assert.equals(bee.RegEx.replace("([^\s])", "a b c", "$"), "$ $ $")
      assert.equals(bee.RegEx.replace("([^\s])", "a b c", "$", 1), "$ b c")
      assert.equals(bee.RegEx.replace("([^\s])", "a b c", (match) => match[1] == "b" ? "$" : match[1]), "a $ c")
    }
    testReplaceAll(assert) {
      assert.equals(bee.RegEx.replaceAll("([^\s])", "a b c", "$"), "$ $ $")
    }
  }
}