#Include ..\common.ahk2

class EnumerableTest {
  testConstructor(assert) {
    assert.deepEquals(bee.Enumerable("string").toValues(), [ "string" ])
    assert.deepEquals(bee.Enumerable(123).toValues(), [ 123 ])
    assert.deepEquals(bee.Enumerable(true).toValues(), [ true ])
  }
  testShortHund(assert) {
    assert.ok(bee.query([ "value" ]).toEnumeratorLike() is Enumerator)
  }
  class BuildingTest {
    testChars(assert) {
      assert.deepEquals(bee.Enumerable.chars("abc").toArray(), [ { key: 1, value: "a" }, { key: 2, value: "b" }, { key: 3, value: "c" }])
    }
    testRange(assert) {
      assert.deepEquals(bee.Enumerable.range(1, 5).toValues(), [ 1, 2, 3, 4, 5 ])
      assert.deepEquals(bee.Enumerable.range("1..5").toValues(), [ 1, 2, 3, 4 ])

      assert.deepEquals(bee.Enumerable.range(1, 5, false).toValues(), [ 1, 2, 3, 4, 5 ])
      assert.deepEquals(bee.Enumerable.range("1...5").toValues(), [ 1, 2, 3, 4, 5 ])

      assert.deepEquals(bee.Enumerable.range(2, 6, false, 2).toValues(), [ 2, 4, 6 ])
      assert.deepEquals(bee.Enumerable.range("2...6 step 2").toValues(), [ 2, 4, 6 ])

      assert.deepEquals(bee.Enumerable.range("'a'...'e'").toValues(), [ "a", "b", "c", "d", "e" ])
    }
  }
  class InstanceTest {
    startEach() {
      this.object := { key: "value" }
      this.object.defineProp("key2", { get: (*) => "value2" })

      this.array := [ "value", "value2" ]
      this.map := Map("key", "value", "key2", "value2")
    }
    end() {
      this.object := ""
      this.array := ""
      this.map := ""
    }
    testCombination(assert) {
      assert.deepEquals(bee.Enumerable(this.object).where((key) => InStr(key, 2)).toArray(), [ { key: "key2", value: "value2" }])
      assert.deepEquals(bee.Enumerable(this.array).where((key) => key == 2).toArray(), [ { key: 2, value: "value2" }])
      assert.deepEquals(bee.Enumerable(this.map).where((key) => InStr(key, 2)).toArray(), [ { key: "key2", value: "value2" }])
    }
    testConcat(assert) {
      assert.deepEquals(bee.Enumerable(this.object).concat({ added: "value3" }).toObject(), { added: "value3", key: "value", key2: "value2" })
    }
    testDefaults(assert) {
      assert.deepEquals(bee.Enumerable(this.object).defaults({ added: "not overwrite" }, { key: "not overwrite", added: "default" }).toArray(), [ { key: "key", value: "value" }, { key: "key2", value: "value2" }, { key: "added", value: "default" } ])
      assert.deepEquals(bee.Enumerable(this.map).defaults({ added: "not overwrite" }, { key: "not overwrite", added: "default" }).toArray(), [ { key: "key", value: "value" }, { key: "key2", value: "value2" }, { key: "added", value: "default" } ])
    }
    testOrderBy(assert) {
      assert.deepEquals(bee.Enumerable([ 3, 2, 1, 4]).orderBy().toArray(), [ { key: 3, value: 1 }, { key: 2, value: 2 }, { key: 1, value: 3 }, { key: 4, value: 4 } ])
      assert.deepEquals(bee.Enumerable([ 3, 2, 1, 4]).orderBy(true).toArray(), [ { key: 4, value: 4 }, { key: 1, value: 3 }, { key: 2, value: 2 }, { key: 3, value: 1 } ])
      assert.deepEquals(bee.Enumerable([ 3, 2, 1, 4]).orderBy((key, value) => value, true).toArray(), [ { key: 4, value: 4 }, { key: 1, value: 3 }, { key: 2, value: 2 }, { key: 3, value: 1 } ])

      assert.deepEquals(bee.Enumerable([ { id: 4, name: "B" }, { id: 2, name: "D" }, { id: 1, name: "C" }, { id: 3, name: "A" }]).orderBy((key, value) => value.name).toValues(), [ { id: 3, name: "A" }, { id: 4, name: "B" }, { id: 1, name: "C" }, { id: 2, name: "D" } ])
      assert.deepEquals(bee.Enumerable([ { id: 4, name: "B" }, { id: 2, name: "D" }, { id: 1, name: "C" }, { id: 3, name: "A" }]).orderBy((key, value) => value.name, (a, b) => bee.compare(a, b, true)).toValues(), [ { id: 2, name: "D" }, { id: 1, name: "C" }, { id: 4, name: "B" }, { id: 3, name: "A" } ])

      assert.deepEquals(bee.Enumerable([ { id: 3, name: "A" }, { id: 1, name: "B" }, { id: 2, name: "A" } ]).orderBy((key, value) => value.name).toValues(), [ { id: 3, name: "A" }, { id: 2, name: "A" }, { id: 1, name: "B" } ])
      assert.deepEquals(bee.Enumerable([ { id: 3, name: "A" }, { id: 1, name: "B" }, { id: 2, name: "A" } ]).orderBy((key, value) => value.name).thenBy((key, value) => value.id).toValues(), [ { id: 2, name: "A" }, { id: 3, name: "A" }, { id: 1, name: "B" } ])
      assert.deepEquals(bee.Enumerable([ { id: 3, name: "A" }, { id: 1, name: "B" }, { id: 2, name: "A" } ]).orderBy((key, value) => value.name, true).thenBy((key, value) => value.id, true).toValues(), [ { id: 1, name: "B" }, { id: 3, name: "A" }, { id: 2, name: "A" } ])
    }
    testReverse(assert) {
      assert.deepEquals(bee.Enumerable(this.object).reverse().toValues(), [ "value2", "value" ])
      assert.deepEquals(bee.Enumerable(this.array).reverse().toValues(), [ "value2", "value" ])
      assert.deepEquals(bee.Enumerable(this.map).reverse().toValues(), [ "value2", "value" ])
    }
    testSelect(assert) {
      assert.deepEquals(bee.Enumerable(this.object).select((key, value) => (value . value)).toArray(), [ { key: "key", value: "valuevalue" }, { key: "key2", value: "value2value2" } ])
      assert.deepEquals(bee.Enumerable(this.array).select((key, value) => (value . value)).toArray(), [ { key: 1, value: "valuevalue" }, { key: 2, value: "value2value2" } ])
      assert.deepEquals(bee.Enumerable(this.map).select((key, value) => (value . value)).toArray(), [ { key: "key", value: "valuevalue" }, { key: "key2", value: "value2value2" } ])
    }
    testToArray(assert) {
      assert.deepEquals(bee.Enumerable(this.object).toArray(), [ { key: "key", value: "value" }, { key: "key2", value: "value2" } ])
      assert.deepEquals(bee.Enumerable(this.array).toArray(), [ { key: 1, value: "value" }, { key: 2, value: "value2" } ])
      assert.deepEquals(bee.Enumerable(this.map).toArray(), [ { key: "key", value: "value" }, { key: "key2", value: "value2" } ])
    }
    testToEnumeratorLike(assert) {
      assert.notOk(bee.Enumerable(this.object).toEnumeratorLike() is Enumerator)
      assert.ok(bee.Enumerable(this.array).toEnumeratorLike() is Enumerator)
      assert.ok(bee.Enumerable(this.map).toEnumeratorLike() is Enumerator)
    }
    testToKeys(assert) {
      assert.deepEquals(bee.Enumerable(this.object).toKeys(), [ "key", "key2" ])
      assert.deepEquals(bee.Enumerable(this.array).toKeys(), [ 1, 2 ])
      assert.deepEquals(bee.Enumerable(this.map).toKeys(), [ "key", "key2" ])
    }
    testToMap(assert) {
      assert.deepEquals(bee.Enumerable(this.object).toMap(), Map("key", "value", "key2", "value2"))
      assert.deepEquals(bee.Enumerable(this.array).toMap(), Map(1, "value", 2, "value2"))
      assert.deepEquals(bee.Enumerable(this.map).toMap(), Map("key", "value", "key2", "value2"))
    }
    testToObject(assert) {
      assert.deepEquals(bee.Enumerable(this.object).toObject(), { key: "value", key2: "value2" })
      assert.deepEquals(bee.Enumerable(this.array).toObject(), { 1: "value", 2: "value2" })
      assert.deepEquals(bee.Enumerable(this.map).toObject(), { key: "value", key2: "value2" })
    }
    testToValues(assert) {
      assert.deepEquals(bee.Enumerable(this.object).toValues(), [ "value", "value2" ])
      assert.deepEquals(bee.Enumerable(this.array).toValues(), [ "value", "value2" ])
      assert.deepEquals(bee.Enumerable(this.map).toValues(), [ "value", "value2" ])
    }
    testWhere(assert) {
      assert.deepEquals(bee.Enumerable(this.object).where((value, *) => InStr(value, "2")).toArray(), [ { key: "key2", value: "value2" } ])
      assert.deepEquals(bee.Enumerable(this.array).where((value, *) => InStr(value, "2")).toArray(), [ { key: 2, value: "value2" } ])
      assert.deepEquals(bee.Enumerable(this.map).where((value, *) => InStr(value, "2")).toArray(), [ { key: "key2", value: "value2" } ])
    }
  }
  class StaticTest {
    startEach() {
      this.object := { key: "value" }
      this.object.defineProp("key2", { get: (*) => "value2" })

      this.array := [ "value", "value2" ]
      this.map := Map("key", "value", "key2", "value2")
    }
    end() {
      this.object := ""
      this.array := ""
      this.map := ""
    }
    testCombination(assert) {
      assert.deepEquals(bee.Enumerable.where(this.object, (key) => InStr(key, 2)).toArray(), [ { key: "key2", value: "value2" }])
      assert.deepEquals(bee.Enumerable.where(this.array, (key) => key == 2).toArray(), [ { key: 2, value: "value2" }])
      assert.deepEquals(bee.Enumerable.where(this.map, (key) => InStr(key, 2)).toArray(), [ { key: "key2", value: "value2" }])
    }
    testConcat(assert) {
      assert.deepEquals(bee.Enumerable.concat(this.object, { added: "value3" }).toObject(), { added: "value3", key: "value", key2: "value2" })
    }
    testDefaults(assert) {
      assert.deepEquals(bee.Enumerable.defaults(this.object, { added: "not overwrite" }, { key: "not overwrite", added: "default" }).toArray(), [ { key: "key", value: "value" }, { key: "key2", value: "value2" }, { key: "added", value: "default" } ])
      assert.deepEquals(bee.Enumerable.defaults(this.map, { added: "not overwrite" }, { key: "not overwrite", added: "default" }).toArray(), [ { key: "key", value: "value" }, { key: "key2", value: "value2" }, { key: "added", value: "default" } ])
    }
    testOrderBy(assert) {
      assert.deepEquals(bee.Enumerable.orderBy([ 3, 2, 1, 4], ).toArray(), [ { key: 3, value: 1 }, { key: 2, value: 2 }, { key: 1, value: 3 }, { key: 4, value: 4 } ])
      assert.deepEquals(bee.Enumerable.orderBy([ 3, 2, 1, 4], true).toArray(), [ { key: 4, value: 4 }, { key: 1, value: 3 }, { key: 2, value: 2 }, { key: 3, value: 1 } ])
      assert.deepEquals(bee.Enumerable.orderBy([ 3, 2, 1, 4], (key, value) => value, true).toArray(), [ { key: 4, value: 4 }, { key: 1, value: 3 }, { key: 2, value: 2 }, { key: 3, value: 1 } ])

      assert.deepEquals(bee.Enumerable.orderBy([ { id: 4, name: "B" }, { id: 2, name: "D" }, { id: 1, name: "C" }, { id: 3, name: "A" }], (key, value) => value.name).toValues(), [ { id: 3, name: "A" }, { id: 4, name: "B" }, { id: 1, name: "C" }, { id: 2, name: "D" } ])
      assert.deepEquals(bee.Enumerable.orderBy([ { id: 4, name: "B" }, { id: 2, name: "D" }, { id: 1, name: "C" }, { id: 3, name: "A" }], (key, value) => value.name, (a, b) => bee.compare(a, b, true)).toValues(), [ { id: 2, name: "D" }, { id: 1, name: "C" }, { id: 4, name: "B" }, { id: 3, name: "A" } ])

      assert.deepEquals(bee.Enumerable.orderBy([ { id: 3, name: "A" }, { id: 1, name: "B" }, { id: 2, name: "A" } ], (key, value) => value.name).toValues(), [ { id: 3, name: "A" }, { id: 2, name: "A" }, { id: 1, name: "B" } ])
      assert.deepEquals(bee.Enumerable.orderBy([ { id: 3, name: "A" }, { id: 1, name: "B" }, { id: 2, name: "A" } ], (key, value) => value.name).thenBy((key, value) => value.id).toValues(), [ { id: 2, name: "A" }, { id: 3, name: "A" }, { id: 1, name: "B" } ])
      assert.deepEquals(bee.Enumerable.orderBy([ { id: 3, name: "A" }, { id: 1, name: "B" }, { id: 2, name: "A" } ], (key, value) => value.name, true).thenBy((key, value) => value.id, true).toValues(), [ { id: 1, name: "B" }, { id: 3, name: "A" }, { id: 2, name: "A" } ])
    }
    testReverse(assert) {
      assert.deepEquals(bee.Enumerable.reverse(this.object).toValues(), [ "value2", "value" ])
      assert.deepEquals(bee.Enumerable.reverse(this.array).toValues(), [ "value2", "value" ])
      assert.deepEquals(bee.Enumerable.reverse(this.map).toValues(), [ "value2", "value" ])
    }
    testSelect(assert) {
      assert.deepEquals(bee.Enumerable.select(this.object, (key, value) => (value . value)).toArray(), [ { key: "key", value: "valuevalue" }, { key: "key2", value: "value2value2" } ])
      assert.deepEquals(bee.Enumerable.select(this.array, (key, value) => (value . value)).toArray(), [ { key: 1, value: "valuevalue" }, { key: 2, value: "value2value2" } ])
      assert.deepEquals(bee.Enumerable.select(this.map, (key, value) => (value . value)).toArray(), [ { key: "key", value: "valuevalue" }, { key: "key2", value: "value2value2" } ])
    }
    testToArray(assert) {
      assert.deepEquals(bee.Enumerable.toArray(this.map), [ { key: "key", value: "value" }, { key: "key2", value: "value2" } ])
      assert.deepEquals(bee.Enumerable.toArray(this.object), [ { key: "key", value: "value" }, { key: "key2", value: "value2" } ])
    }
    testToEnumeratorLike(assert) {
      assert.notOk(bee.Enumerable.toEnumeratorLike(this.object) is Enumerator)
      assert.ok(bee.Enumerable.toEnumeratorLike(this.array) is Enumerator)
      assert.ok(bee.Enumerable.toEnumeratorLike(this.map) is Enumerator)
    }
    testToKeys(assert) {
      assert.deepEquals(bee.Enumerable.toKeys(this.object), [ "key", "key2" ])
      assert.deepEquals(bee.Enumerable.toKeys(this.array), [ 1, 2 ])
      assert.deepEquals(bee.Enumerable.toKeys(this.map), [ "key", "key2" ])
    }
    testToMap(assert) {
      assert.deepEquals(bee.Enumerable.toMap(this.object), Map("key", "value", "key2", "value2"))
      assert.deepEquals(bee.Enumerable.toMap(this.array), Map(1, "value", 2, "value2"))
      assert.deepEquals(bee.Enumerable.toMap(this.map), Map("key", "value", "key2", "value2"))
    }
    testToObject(assert) {
      assert.deepEquals(bee.Enumerable.toObject(this.map), { key: "value", key2: "value2" })
    }
    testToValues(assert) {
      assert.deepEquals(bee.Enumerable.toValues(this.object), [ "value", "value2" ])
      assert.deepEquals(bee.Enumerable.toValues(this.array), [ "value", "value2" ])
      assert.deepEquals(bee.Enumerable.toValues(this.map), [ "value", "value2" ])
    }
    testWhere(assert) {
      assert.deepEquals(bee.Enumerable.where(this.object, (value, *) => InStr(value, "2")).toArray(), [ { key: "key2", value: "value2" } ])
      assert.deepEquals(bee.Enumerable.where(this.array, (value, *) => InStr(value, "2")).toArray(), [ { key: 2, value: "value2" } ])
      assert.deepEquals(bee.Enumerable.where(this.map, (value, *) => InStr(value, "2")).toArray(), [ { key: "key2", value: "value2" } ])
    }
  }
}