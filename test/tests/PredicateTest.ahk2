#Include ..\common.ahk2

class PredicateTest {
  testAll(assert) {
    assert.ok(bee.all("abc", [ bee.Predicate.startsWith("a") ]))
    assert.notOk(bee.all("abc", [ bee.Predicate.startsWith("a"), bee.Predicate.startsWith("b") ]))
  }
  testAny(assert) {
    assert.ok(bee.any("abc", [ bee.Predicate.startsWith("a"), bee.Predicate.startsWith("b") ]))
  }
  testEquals(assert) {
    assert.ok(bee.equals("a", "a"))
    assert.notOk(bee.equals("a", "A"))
    assert.notOk(bee.equals({}, {}))
  }
  testHasKey(assert) {
    assert.ok(bee.hasKey({ a: "" }, "a"))
    assert.ok(bee.hasKey(Map("a", ""), "a"))
    assert.ok(bee.hasKey([ "value" ], 1))
    assert.notOk(bee.hasKey("a", "a"))
  }
  testHasNestedKey(assert) {
    assert.ok(bee.hasNestedKey({ key: Map("nest-key", [ "nested-value" ]) }, "key", "nest-key", 1))
  }
  testIs(assert) {
    str := bee.String("")
    assert.ok(bee.is(str, bee.String))
    assert.ok(bee.is(str, bee.rule.Primitive))
  }
  testIsArray(assert) {
    assert.ok(bee.isArray([]))
    assert.notOk(bee.isArray({}))
    assert.notOk(bee.isArray(""))
  }
  testIsBoolean(assert) {
    assert.ok(bee.isBoolean(true))
    assert.ok(bee.isBoolean(false))
    assert.ok(bee.isBoolean(1))
    assert.ok(bee.isBoolean(0))
  }
  testIsBoundFunc(assert) {
    assert.ok(bee.isBoundFunc(SubStr.bind()))
    assert.notOk(bee.isBoundFunc(SubStr))
  }
  testIsCallable(assert) {
    assert.ok(bee.isCallable({ call: () => "" }))
  }
  testIsClass(assert) {
    assert.ok(bee.isClass(bee))
    assert.notOk(bee.isClass(this))
    assert.notOk(bee.isClass(""))
    assert.notOk(bee.isClass({}))
  }
  testIsDigit(assert) {
    assert.ok(bee.isDigit(0))
    assert.ok(bee.isDigit(5))
    assert.ok(bee.isDigit(9))
    assert.notOk(bee.isDigit(10))
    assert.notOk(bee.isDigit("1"))
    assert.notOk(bee.isDigit({}))
  }
  testIsDigitLike(assert) {
    assert.ok(bee.isDigitLike(0))
    assert.ok(bee.isDigitLike(5))
    assert.ok(bee.isDigitLike(9))
    assert.ok(bee.isDigitLike("1"))
    assert.notOk(bee.isDigitLike({}))
  }
  testIsFalsy(assert) {
    assert.Ok(bee.isFalsy(false))
    assert.Ok(bee.isFalsy(""))
    assert.Ok(bee.isFalsy(0))
    assert.notok(bee.isFalsy("a"))
    assert.notok(bee.isFalsy(true))
    assert.notok(bee.isFalsy(123))
  }
  testIsFunc(assert) {
    assert.ok(bee.isFunc(FuncExample))
    assert.ok(bee.isFunc(() => ""))
    assert.ok(bee.isFunc(() => FuncExample))
    assert.ok(bee.isFunc(ObjBindMethod(bee.predicate, "isFunc")))
    assert.notOk(bee.isFunc({ call: () => "" }))

    FuncExample() {
    }
  }
  testIsNamedFunc(assert) {
    assert.ok(bee.isNamedFunc(FuncExample))
    assert.ok(bee.isNamedFunc(this.testIsNamedFunc))
    assert.notOk(bee.isNamedFunc(FuncExample.Bind()))
    assert.notOk(bee.isNamedFunc(() => ""))
    assert.notOk(bee.isNamedFunc({ call: () => "", name: "A" }))
    return

    FuncExample() {
    }
  }
  testIsNegative(assert) {
    assert.ok(bee.isNegative(-1))
    assert.notOk(bee.isNegative(0))
    assert.notOk(bee.isNegative(1))
  }
  testIsNumber(assert) {
    assert.ok(bee.isNumber(1))
    assert.ok(bee.isNumber(-1))
    assert.ok(bee.isNumber(0x123))
    assert.ok(bee.isNumber(123e+1))
    assert.ok(bee.isNumber(true))
    assert.ok(bee.isNumber(false))
    assert.notOk(bee.isNumber({}))
  }
  testIsNumberLike(assert) {
    assert.ok(bee.isNumberLike("1"))
    assert.ok(bee.isNumberLike("-1"))
    assert.ok(bee.isNumberLike("0x123"))
    assert.ok(bee.isNumberLike("123e+1"))
  }
  testIsObject(assert) {
    assert.ok(bee.isObject()({}))
    assert.ok(bee.isObject({}))
  }
  testIsPositive(assert) {
    assert.ok(bee.isPositive(1))
    assert.notOk(bee.isPositive(0))
    assert.notOk(bee.isPositive(-1))
  }
  testIsPrimitive(assert) {
    assert.ok(bee.isPrimitive("abc"))
    assert.ok(bee.isPrimitive(123))
    assert.notOk(bee.isPrimitive({}))
  }
  testIsString(assert) {
    assert.ok(bee.isString(""))
    assert.notOk(bee.isString(1))
    assert.notOk(bee.isString({}))
  }
  testIsTruthy(assert) {
    assert.ok(bee.isTruthy("a"))
    assert.ok(bee.isTruthy(true))
    assert.ok(bee.isTruthy(123))
    assert.notOk(bee.isTruthy(false))
    assert.notOk(bee.isTruthy(""))
    assert.notOk(bee.isTruthy(0))
  }
  testMatchPattern(assert) {
    assert.ok(bee.matchPattern("example text", "e"))
    assert.ok(bee.matchPattern("example text", { text: "E", type: "ignorecase" }))
    assert.ok(bee.matchPattern("example text", [ "E", "ignorecase" ]))
    assert.ok(bee.matchPattern("example text", "/(?<=l)e/"))
  }
  testNot(assert) {
    assert.ok(bee.not(bee.isString(), {}))
  }
  testNone(assert) {
    assert.ok(bee.none("", [ bee.startsWith("a"), bee.startsWith("b") ]))
    assert.notOk(bee.none("a", [ bee.startsWith("a"), bee.startsWith("b") ]))
  }
  testStartsWith(assert) {
    assert.ok(bee.startsWith("abcdefg", "abc"))

    startsWithAbc := bee.startsWith("abc")
    assert.ok(startsWithAbc("abcdefg"))
  }
  class AllTest {
    testAllIsObject(assert) {
      assert.ok(bee.all.isObject([ {}, [] ]))
    }
  }
  class AnyTest {
    testAnyIsObject(assert) {
      assert.ok(bee.any.isObject([ {}, [], "" ]))
    }
  }
  class NotTest {
    testNotIsObject(assert) {
      assert.ok(bee.not.isObject(""))
      assert.notOk(bee.not.isObject({}))
    }
  }
  class NoneTest {
    testNoneIsObject(assert) {
      assert.ok(bee.none.startsWith([ "a", "b", "c" ], "z"))
      assert.notOk(bee.none.startsWith([ "a", "b", "c" ], "a"))
      assert.notOk(bee.none.isObject([ {}, [], "" ]))
    }
  }
}