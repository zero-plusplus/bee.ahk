#Include ..\common.ahk2

class PredicateTest {
  testAll(assert) {
    assert.ok(bee.all("abc", [ bee.Predicate.startsWith("a") ]))
    assert.notOk(bee.all("abc", [ bee.Predicate.startsWith("a"), bee.Predicate.startsWith("b") ]))
  }
  testAny(assert) {
    assert.ok(bee.any("abc", [ bee.Predicate.startsWith("a"), bee.Predicate.startsWith("b") ]))
  }
  testIs(assert) {
    str := bee.String("")
    assert.ok(bee.is(str, bee.String))
    assert.ok(bee.is(str, bee.rule.Primitive))
  }
  testIsNumber(assert) {
    assert.ok(bee.isNumber(1))
    assert.ok(bee.isNumber(-1))
    assert.ok(bee.isNumber(0x123))
    assert.ok(bee.isNumber(123e+1))
    assert.ok(bee.isNumber(true))
    assert.ok(bee.isNumber(false))
    assert.notOk(bee.isNumber({}))
  }
  testIsNumberLike(assert) {
    assert.ok(bee.isNumberLike("1"))
    assert.ok(bee.isNumberLike("-1"))
    assert.ok(bee.isNumberLike("0x123"))
    assert.ok(bee.isNumberLike("123e+1"))
  }
  testIsObject(assert) {
    assert.ok(bee.isObject()({}))
    assert.ok(bee.isObject({}))
  }
  testIsString(assert) {
    assert.ok(bee.isString(""))
    assert.notOk(bee.isString(1))
    assert.notOk(bee.isString({}))
  }
  testNot(assert) {
    assert.ok(bee.not(bee.isString(), {}))
  }
  testNone(assert) {
    assert.ok(bee.none("", [ bee.startsWith("a"), bee.startsWith("b") ]))
    assert.notOk(bee.none("a", [ bee.startsWith("a"), bee.startsWith("b") ]))
  }
  testStartsWith(assert) {
    assert.ok(bee.startsWith("abcdefg", "abc"))

    startsWithAbc := bee.startsWith("abc")
    assert.ok(startsWithAbc("abcdefg"))
  }
  class AllTest {
    testAllIsObject(assert) {
      assert.ok(bee.all.isObject([ {}, [] ]))
    }
  }
  class AnyTest {
    testAnyIsObject(assert) {
      assert.ok(bee.any.isObject([ {}, [], "" ]))
    }
  }
  class NotTest {
    testNotIsObject(assert) {
      assert.ok(bee.not.isObject(""))
      assert.notOk(bee.not.isObject({}))
    }
  }
  class NoneTest {
    testNoneIsObject(assert) {
      assert.ok(bee.none.startsWith([ "a", "b", "c" ], "z"))
      assert.notOk(bee.none.startsWith([ "a", "b", "c" ], "a"))
      assert.notOk(bee.none.isObject([ {}, [], "" ]))
    }
  }
}