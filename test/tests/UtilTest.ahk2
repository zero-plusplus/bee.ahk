#Include ..\common.ahk2

class UtilTest {
  testCurry(assert) {
    curried1 := bee.curry(SubStr)
    assert.ok(curried1 is BoundFunc)

    curried2 := curried1("abc")
    assert.ok(curried2 is BoundFunc)

    curried3 := curried2(1)
    assert.ok(curried3 is BoundFunc)

    assert.equals(curried3(1), "a")
    assert.equals(curried1("abc", 1, 1), "a")
  }
  testGetProp(assert) {
    assert.equals(bee.getProp({ key: "value" }, "key"), "value")
    assert.equals(bee.getProp(Map("key", "value"), "key"), "value")
    assert.equals(bee.getProp([ "value" ], 1), "value")
  }
  testPartial(assert) {
    getChar := bee.partial(SubStr, bee, bee, 1)
    assert.equals(getChar("abc", 1), "a")
    assert.equals(getChar("abc", 2), "b")
    assert.equals(getChar("abc", 3), "c")

    assert.ok(getChar is BoundFunc)
  }
  testToBoolean(assert) {
    assert.equals(bee.toBoolean("a"), true)
    assert.equals(bee.toBoolean(""), false)
    assert.equals(bee.toBoolean(1), true)
    assert.equals(bee.toBoolean(0), false)
    assert.equals(bee.toBoolean({}), true)
  }
  testTryGetProp(assert) {
    assert.equals(bee.tryGetProp({ key: "value" }, "unknown", "default"), "default")
    assert.equals(bee.tryGetProp(Map("key", "value"), "unknown", "default"), "default")
    assert.equals(bee.tryGetProp([ "value" ], 5, "default"), "default")
  }
}