#Include ..\common.ahk2

class UtilTest {
  testCallback(assert) {
    assert.equals(bee.callback((value) => value)("a", "b", "c"), "a")
  }
  testCurry(assert) {
    curried1 := bee.curry(SubStr)
    assert.ok(curried1 is BoundFunc)

    curried2 := curried1("abc")
    assert.ok(curried2 is BoundFunc)

    curried3 := curried2(1)
    assert.ok(curried3 is BoundFunc)

    assert.equals(curried3(1), "a")
    assert.equals(curried1("abc", 1, 1), "a")
  }
  testGetNestedProp(assert) {
    assert.equals(bee.getNestedProp({ key: Map("nest-key", [ "nested-value"]) }, "key", "nest-key", "1"), "nested-value")
  }
  testGetProp(assert) {
    assert.equals(bee.getProp({ key: "value" }, "key"), "value")
    assert.equals(bee.getProp(Map("key", "value"), "key"), "value")
    assert.equals(bee.getProp([ "value" ], 1), "value")
  }
  testPartial(assert) {
    getChar := bee.partial(SubStr, bee, bee, 1)
    assert.equals(getChar("abc", 1), "a")
    assert.equals(getChar("abc", 2), "b")
    assert.equals(getChar("abc", 3), "c")

    assert.ok(getChar is BoundFunc)
  }
  testToArray(assert) {
    arr := []
    assert.equals(bee.toArray(arr), arr)

    assert.deepEquals(bee.toArray("a"), [ "a" ])
    assert.deepEquals(bee.toArray(123), [ 123 ])
    assert.deepEquals(bee.toArray({ key: "value" }), [ { key: "value"} ])
    assert.deepEquals(bee.toArray(Map("key", "value")), [ Map("key", "value") ])
  }
  testToBoolean(assert) {
    assert.equals(bee.toBoolean("a"), true)
    assert.equals(bee.toBoolean(""), false)
    assert.equals(bee.toBoolean(1), true)
    assert.equals(bee.toBoolean(0), false)
    assert.equals(bee.toBoolean({}), true)
  }
  testToNumber(assert) {
    assert.equals(bee.toNumber("1"), 1)
    assert.equals(bee.toNumber("0x123"), 0x123)
    assert.equals(bee.toNumber("123e+5"), 123e+5)
    assert.equals(bee.toNumber("abc"), "")
    assert.equals(bee.toNumber({}), "")
  }
  testTryGetProp(assert) {
    assert.equals(bee.tryGetProp({ key: "value" }, "unknown", "default"), "default")
    assert.equals(bee.tryGetProp(Map("key", "value"), "unknown", "default"), "default")
    assert.equals(bee.tryGetProp([ "value" ], 5, "default"), "default")
  }
  testWalk(assert) {
    keys := []
    bee.walk({ a: { b: { c: { d: "" }, e: "" }, f: "" }, g: "" }, (value, key, *) => keys.push(key))
    assert.deepEquals(keys, [ "a", "b", "c", "d", "e", "f", "g"])
  }
}