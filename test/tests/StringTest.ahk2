#Include ..\common.ahk2

class StringTest {
  class StaticTest {
    testRepeat(assert) {
      assert.equals(bee.String.repeat("abc", 3), "abcabcabc")
    }
    testReplace(assert) {
      assert.equals(bee.String.replace("a b a", "a", "$"), "$ b $")
      assert.equals(bee.String.replace("a b a", "a", "$", 1), "$ b a")
      assert.equals(bee.String.replace("a b a", "a", "$", 1), "$ b a")

      assert.equals(bee.String.replace("a b a", "/(?<=b\s)(a)/", "$"), "a b $")

      assert.equals(bee.String.replace("a b a", "a", () => "$"), "$ b $")
      assert.equals(bee.String.replace("a b a", "a", () => "$", 1), "$ b a")
    }
    testReplaceAll(assert) {
      assert.equals(bee.String.replaceAll("a b a", "a", "$"), "$ b $")
      assert.equals(bee.String.replaceAll("a b a", "/(?<=b\s)(a)/", "$"), "a b $")
      assert.equals(bee.String.replaceAll("a b a", "a", () => "$"), "$ b $")
    }
    testReplaceFirst(assert) {
      assert.equals(bee.String.replaceFirst("a b a", "a", "$"), "$ b a")
      assert.equals(bee.String.replaceFirst("a b a", "a", "$"), "$ b a")
    }
    testSlice(assert) {
      assert.equals(bee.String.slice("12345", 1, 5), "1234")
      assert.equals(bee.String.slice("12345", "1..5"), "1234")

      assert.equals(bee.String.slice("12345", "^2..^1"), "4")
      assert.equals(bee.String.slice("12345", "1..^1"), "1234")
    }
    testLength(assert) {
      assert.equals(bee.String.length("abc"), 3)
    }
  }
  class InstanceTest {
    testRepeat(assert) {
      assert.equals(bee.String("abc").repeat(3), "abcabcabc")
    }
    testValue(assert) {
      assert.equals(bee.String("abc").value, "abc")
    }
    testLength(assert) {
      assert.equals(bee.String("abc").length, 3)
    }
    testReplace(assert) {
      assert.equals(bee.String("a b a").replace("a", "$").value, "$ b $")
      assert.equals(bee.String("a b a").replace("a", "$", 1).value, "$ b a")
      assert.equals(bee.String("a b a").replace("a", "$", 1).value, "$ b a")

      assert.equals(bee.String("a b a").replace("/(?<=b\s)(a)/", "$").value, "a b $")

      assert.equals(bee.String("a b a").replace("a", () => "$").value, "$ b $")
      assert.equals(bee.String("a b a").replace("a", () => "$", 1).value, "$ b a")
    }
    testReplaceAll(assert) {
      assert.equals(bee.String("a b a").replaceAll("a", "$").value, "$ b $")
      assert.equals(bee.String("a b a").replaceAll("/(?<=b\s)(a)/", "$").value, "a b $")
      assert.equals(bee.String("a b a").replaceAll("a", () => "$").value, "$ b $")
    }
    testReplaceFirst(assert) {
      assert.equals(bee.String("a b a").replaceFirst("a", "$").value, "$ b a")
      assert.equals(bee.String("a b a").replaceFirst("a", "$").value, "$ b a")
    }
    testSlice(assert) {
      assert.equals(bee.String("12345").slice(1, 5).value, "1234")
      assert.equals(bee.String("12345").slice("1..5").value, "1234")

      assert.equals(bee.String("12345").slice("^2..^1").value, "4")
      assert.equals(bee.String("12345").slice("1..^1").value, "1234")
    }
  }
}