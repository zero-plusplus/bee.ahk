#Include ..\common.ahk2

class StringTest {
  testValue(assert) {
    assert.equals(bee.String("abc").value, "abc")
  }
  class InstanceTest {
    testCharAt(assert) {
      assert.equals(bee.String("123456").charAt(5).value, "5")
      assert.equals(bee.String("123456").charAt(-1).value, "6")
    }
    testConcat(assert) {
      assert.equals(bee.String("123").concat("4", "5", "6").value, "123456")
    }
    testCount(assert) {
      assert.equals(bee.String("a b a").count("a"), 2)
      assert.equals(bee.String("a b a").count("/(?<=b\s)a/"), 1)
      assert.equals(bee.String("a b a").count({ text: "A", type: "ignorecase" }), 2)
    }
    testEnclose(assert) {
      assert.equals(bee.String("abc").enclose("%").value, "%abc%")
      assert.equals(bee.String("abc").enclose("[", "]").value, "[abc]")
    }
    testFormat(assert) {
      assert.equals(bee.String("{}: {}").format("a", "b").value, "a: b")
    }
    testIndexOf(assert) {
      assert.equals(bee.String("example text").indexOf("e"), 1)
      assert.equals(bee.String("example text").indexOf("e", 2), 7)
      assert.equals(bee.String("example text").indexOf("unknown"), 0)
      assert.equals(bee.String("example text").indexOf({ text: "E", type: "ignorecase" }), 1)
      assert.equals(bee.String("example text").indexOf("/(?<=l)e/"), 7)
    }
    testLastIndexOf(assert) {
      assert.equals(bee.String("example text").lastIndexOf("e"), 10)
      assert.equals(bee.String("example text").lastIndexOf("e", 2), 7)
      assert.equals(bee.String("example text").lastIndexOf("unknown"), 0)
      assert.equals(bee.String("example text").lastIndexOf({ text: "E", type: "ignorecase" }), 10)
      assert.equals(bee.String("example text").lastIndexOf("/(?<=l)e/"), 7)
    }
    testLength(assert) {
      assert.equals(bee.String("abc").length, 3)
    }
    testMatch(assert) {
      assert.equals(bee.String("a b c").match("b").pos, 3)
      assert.equals(bee.String("a b c").match([ "B", "ignorecase" ]).pos, 3)

      assert.equals(bee.String("i)^(\s)$").match("i)^(\s)$").pos, 1)
    }
    testMatchAll(assert) {
      assert.equals(bee.String("a b c").matchAll("/([^\s])/").length, 3)
    }
    testRepeat(assert) {
      assert.equals(bee.String("abc").repeat(3), "abcabcabc")
    }
    testReplace(assert) {
      assert.equals(bee.String("a b a").replace("a", "$").value, "$ b $")
      assert.equals(bee.String("a b a").replace("a", "$", 1).value, "$ b a")
      assert.equals(bee.String("a b a").replace("a", "$", 1).value, "$ b a")

      assert.equals(bee.String("a b a").replace("/(?<=b\s)(a)/", "$").value, "a b $")

      assert.equals(bee.String("a b a").replace("a", () => "$").value, "$ b $")
      assert.equals(bee.String("a b a").replace("a", () => "$", 1).value, "$ b a")
    }
    testReplaceAll(assert) {
      assert.equals(bee.String("a b a").replaceAll("a", "$").value, "$ b $")
      assert.equals(bee.String("a b a").replaceAll("/(?<=b\s)(a)/", "$").value, "a b $")
      assert.equals(bee.String("a b a").replaceAll("a", () => "$").value, "$ b $")
    }
    testReplaceFirst(assert) {
      assert.equals(bee.String("a b a").replaceFirst("a", "$").value, "$ b a")
      assert.equals(bee.String("a b a").replaceFirst("a", "$").value, "$ b a")
    }
    testSearch(assert) {
      assert.equals(bee.String("example text").search("e"), 1)
      assert.equals(bee.String("example text").search("e", -1), 10)
      assert.equals(bee.String("example text").search("e", 1, 2), 7)
      assert.equals(bee.String("example text").search("unknown"), 0)
      assert.equals(bee.String("example text").search({ text: "E", type: "ignorecase" }), 1)
      assert.equals(bee.String("example text").search("/(?<=l)e/"), 7)

      assert.throws(() => bee.String("example text").search("e", 0))
    }
    testSubStr(assert) {
      assert.equals(bee.String("123456").substr(1).value, "123456")
      assert.equals(bee.String("123456").substr(0).value, "")
      assert.equals(bee.String("123456").substr(1, 1).value, "1")
      assert.equals(bee.String("123456").substr(-1, 1).value, "6")
    }
    testSlice(assert) {
      assert.equals(bee.String("12345").slice(1, 5).value, "12345")
      assert.equals(bee.String("12345").slice("1..5").value, "1234")

      assert.equals(bee.String("12345").slice("^2..^1").value, "4")
      assert.equals(bee.String("12345").slice("1..^1").value, "1234")
    }
    testTemplate(assert) {
      assert.equals(bee.String("${1}").template("abc").value, 'abc')
      assert.equals(bee.String("${}").template("abc").value, 'abc')
      assert.equals(bee.String("${1}, ${1}").template("abc").value, 'abc, abc')
      assert.equals(bee.String("\${1}, ${1}").template("abc").value, '${1}, abc')

      assert.equals(bee.String("${0}").template({ a: { b: "b" }, c: "c" }).value, '{ a: { b: "b" }, c: "c" }')

      assert.equals(bee.String("${}, ${}, ${}").template(1, 2, 3).value, '1, 2, 3')
      assert.equals(bee.String("${}, ${}, ${}").template([ 1, 2, 3 ]).value, '1, 2, 3')

      assert.equals(bee.String("${a.b}: ${c} ${a}").template({ a: { b: "b" }, c: "c" }).value, 'b: c { b: "b" }')
      assert.equals(bee.String("${1}: ${2.key}").template([ "value", { key: "value2" } ]).value, "value: value2")
      assert.equals(bee.String("${1}: ${2.key}").template("value", { key: "value2" }).value, "value: value2")
      assert.equals(bee.String("${1.key}, ${2.key}").template({ key: "value" }, { key: "value2" }).value, 'value, value2')
    }
  }
  class StaticTest {
    testCharAt(assert) {
      assert.equals(bee.String.charAt("123456", 5), "5")
      assert.equals(bee.String.charAt("123456", -1), "6")
    }
    testConcat(assert) {
      assert.equals(bee.String.concat("123", "4", "5", "6"), "123456")
    }
    testCount(assert) {
      assert.equals(bee.String.count("a b a", "a"), 2)
      assert.equals(bee.String.count("a b a", "/(?<=b\s)a/"), 1)
      assert.equals(bee.String.count("a b a", { text: "A", type: "ignorecase" }), 2)
    }
    testEnclose(assert) {
      assert.equals(bee.String.enclose("abc", "%"), "%abc%")
      assert.equals(bee.String.enclose("abc", "[", "]"), "[abc]")
    }
    testFormat(assert) {
      assert.equals(bee.String.format("{}: {}", "a", "b"), "a: b")
    }
    testIndexOf(assert) {
      assert.equals(bee.String.indexOf("example text", "e"), 1)
      assert.equals(bee.String.indexOf("example text", "e", 2), 7)
      assert.equals(bee.String.indexOf("example text", "unknown"), 0)
      assert.equals(bee.String.indexOf("example text", { text: "E", type: "ignorecase" }), 1)
      assert.equals(bee.String.indexOf("example text", "/(?<=l)e/"), 7)
    }
    testLastIndexOf(assert) {
      assert.equals(bee.String.lastIndexOf("example text", "e"), 10)
      assert.equals(bee.String.lastIndexOf("example text", "e", 2), 7)
      assert.equals(bee.String.lastIndexOf("example text", "unknown"), 0)
      assert.equals(bee.String.lastIndexOf("example text", { text: "E", type: "ignorecase" }), 10)
      assert.equals(bee.String.lastIndexOf("example text", "/(?<=l)e/"), 7)
    }
    testLength(assert) {
      assert.equals(bee.String.length("abc"), 3)
    }
    testMatch(assert) {
      assert.equals(bee.String.match("a b c", "b").pos, 3)
      assert.equals(bee.String.match("a b c", [ "B", "ignorecase" ]).pos, 3)

      assert.equals(bee.String.match("i)^(\s)$", "i)^(\s)$").pos, 1)
    }
    testMatchAll(assert) {
      assert.equals(bee.String.matchAll("a b c", "/([^\s])/").length, 3)
    }
    testRepeat(assert) {
      assert.equals(bee.String.repeat("abc", 3), "abcabcabc")
    }
    testReplace(assert) {
      assert.equals(bee.String.replace("a b a", "a", "$"), "$ b $")
      assert.equals(bee.String.replace("a b a", "a", "$", 1), "$ b a")
      assert.equals(bee.String.replace("a b a", "a", "$", 1), "$ b a")

      assert.equals(bee.String.replace("a b a", "/(?<=b\s)(a)/", "$"), "a b $")

      assert.equals(bee.String.replace("a b a", "a", () => "$"), "$ b $")
      assert.equals(bee.String.replace("a b a", "a", () => "$", 1), "$ b a")
    }
    testReplaceAll(assert) {
      assert.equals(bee.String.replaceAll("a b a", "a", "$"), "$ b $")
      assert.equals(bee.String.replaceAll("a b a", "/(?<=b\s)(a)/", "$"), "a b $")
      assert.equals(bee.String.replaceAll("a b a", "a", () => "$"), "$ b $")
    }
    testReplaceFirst(assert) {
      assert.equals(bee.String.replaceFirst("a b a", "a", "$"), "$ b a")
      assert.equals(bee.String.replaceFirst("a b a", "a", "$"), "$ b a")
    }
    testSearch(assert) {
      assert.equals(bee.String.search("example text", "e"), 1)
      assert.equals(bee.String.search("example text", "e", -1), 10)
      assert.equals(bee.String.search("example text", "e", 1, 2), 7)
      assert.equals(bee.String.search("example text", "unknown"), 0)
      assert.equals(bee.String.search("example text", { text: "E", type: "ignorecase" }), 1)
      assert.equals(bee.String.search("example text", "/(?<=l)e/"), 7)

      assert.throws(() => bee.String.search("example text", "e", 0))
    }
    testSubStr(assert) {
      assert.equals(bee.String.substr("123456", 1), "123456")
      assert.equals(bee.String.substr("123456", 0), "")
      assert.equals(bee.String.substr("123456", 1, 1), "1")
      assert.equals(bee.String.substr("123456", -1, 1), "6")
    }
    testSlice(assert) {
      assert.equals(bee.String.slice("12345", 1, 5), "12345")
      assert.equals(bee.String.slice("12345", "1..5"), "1234")

      assert.equals(bee.String.slice("12345", "^2..^1"), "4")
      assert.equals(bee.String.slice("12345", "1..^1"), "1234")
    }
    testTemplate(assert) {
      assert.equals(bee.String.template("${1}", "abc"), 'abc')
      assert.equals(bee.String.template("${}", "abc"), 'abc')
      assert.equals(bee.String.template("${1}, ${1}", "abc"), 'abc, abc')
      assert.equals(bee.String.template("\${1}, ${1}", "abc"), '${1}, abc')

      assert.equals(bee.String.template("${0}", { a: { b: "b" }, c: "c" }), '{ a: { b: "b" }, c: "c" }')

      assert.equals(bee.String.template("${}, ${}, ${}", 1, 2, 3), '1, 2, 3')
      assert.equals(bee.String.template("${}, ${}, ${}", [ 1, 2, 3 ]), '1, 2, 3')

      assert.equals(bee.String.template("${a.b}: ${c} ${a}", { a: { b: "b" }, c: "c" }), 'b: c { b: "b" }')
      assert.equals(bee.String.template("${1}: ${2.key}", [ "value", { key: "value2" } ]), "value: value2")
      assert.equals(bee.String.template("${1}: ${2.key}", "value", { key: "value2" }), "value: value2")
      assert.equals(bee.String.template("${1.key}, ${2.key}", { key: "value" }, { key: "value2" }), 'value, value2')
    }
  }
}